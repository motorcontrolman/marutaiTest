
blank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002fb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002fb4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175f  00000000  00000000  0002acd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024831  00000000  00000000  0002db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb29  00000000  00000000  00052361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f86  00000000  00000000  0005de8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ee10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  0014ee60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002f78 	.word	0x08002f78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002f78 	.word	0x08002f78

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa9b 	bl	8000756 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f830 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f91e 	bl	8000464 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f86c 	bl	8000304 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800022c:	4812      	ldr	r0, [pc, #72]	; (8000278 <main+0x60>)
 800022e:	f001 fbaf 	bl	8001990 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  //HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000232:	2108      	movs	r1, #8
 8000234:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x60>)
 8000236:	f001 fc85 	bl	8001b44 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800023a:	2108      	movs	r1, #8
 800023c:	480e      	ldr	r0, [pc, #56]	; (8000278 <main+0x60>)
 800023e:	f002 fc5d 	bl	8002afc <HAL_TIMEx_PWMN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	480d      	ldr	r0, [pc, #52]	; (800027c <main+0x64>)
 8000248:	f000 fd96 	bl	8000d78 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800024c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000250:	480a      	ldr	r0, [pc, #40]	; (800027c <main+0x64>)
 8000252:	f000 fd91 	bl	8000d78 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  TIM1 -> CCR1 = 2500;
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <main+0x68>)
 8000258:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800025c:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1 -> CCR2 = 2500;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x68>)
 8000260:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000264:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1 -> CCR3 = 2500;
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <main+0x68>)
 8000268:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800026c:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f000 fae1 	bl	8000838 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000276:	e7e4      	b.n	8000242 <main+0x2a>
 8000278:	20000028 	.word	0x20000028
 800027c:	48000400 	.word	0x48000400
 8000280:	40012c00 	.word	0x40012c00

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	; 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2238      	movs	r2, #56	; 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fe68 	bl	8002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002aa:	f000 fd7f 	bl	8000dac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	2340      	movs	r3, #64	; 0x40
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002bc:	2300      	movs	r3, #0
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fe15 	bl	8000ef4 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002d0:	f000 f908 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d8:	2301      	movs	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 f913 	bl	8001518 <HAL_RCC_ClockConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f8:	f000 f8f4 	bl	80004e4 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3750      	adds	r7, #80	; 0x50
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b09c      	sub	sp, #112	; 0x70
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
 8000334:	615a      	str	r2, [r3, #20]
 8000336:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2234      	movs	r2, #52	; 0x34
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fe12 	bl	8002f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000344:	4b45      	ldr	r3, [pc, #276]	; (800045c <MX_TIM1_Init+0x158>)
 8000346:	4a46      	ldr	r2, [pc, #280]	; (8000460 <MX_TIM1_Init+0x15c>)
 8000348:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800034a:	4b44      	ldr	r3, [pc, #272]	; (800045c <MX_TIM1_Init+0x158>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <MX_TIM1_Init+0x158>)
 8000352:	2220      	movs	r2, #32
 8000354:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000356:	4b41      	ldr	r3, [pc, #260]	; (800045c <MX_TIM1_Init+0x158>)
 8000358:	f241 3288 	movw	r2, #5000	; 0x1388
 800035c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b3f      	ldr	r3, [pc, #252]	; (800045c <MX_TIM1_Init+0x158>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000364:	4b3d      	ldr	r3, [pc, #244]	; (800045c <MX_TIM1_Init+0x158>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b3c      	ldr	r3, [pc, #240]	; (800045c <MX_TIM1_Init+0x158>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000370:	483a      	ldr	r0, [pc, #232]	; (800045c <MX_TIM1_Init+0x158>)
 8000372:	f001 fab5 	bl	80018e0 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800037c:	f000 f8b2 	bl	80004e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800038a:	4619      	mov	r1, r3
 800038c:	4833      	ldr	r0, [pc, #204]	; (800045c <MX_TIM1_Init+0x158>)
 800038e:	f001 fdff 	bl	8001f90 <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000398:	f000 f8a4 	bl	80004e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800039c:	482f      	ldr	r0, [pc, #188]	; (800045c <MX_TIM1_Init+0x158>)
 800039e:	f001 fb6f 	bl	8001a80 <HAL_TIM_PWM_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80003a8:	f000 f89c 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ac:	2300      	movs	r3, #0
 80003ae:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003b0:	2300      	movs	r3, #0
 80003b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003bc:	4619      	mov	r1, r3
 80003be:	4827      	ldr	r0, [pc, #156]	; (800045c <MX_TIM1_Init+0x158>)
 80003c0:	f002 fc5e 	bl	8002c80 <HAL_TIMEx_MasterConfigSynchronization>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003ca:	f000 f88b 	bl	80004e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ce:	2360      	movs	r3, #96	; 0x60
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d6:	2300      	movs	r3, #0
 80003d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003da:	2300      	movs	r3, #0
 80003dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003e2:	2300      	movs	r3, #0
 80003e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003ee:	2208      	movs	r2, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <MX_TIM1_Init+0x158>)
 80003f4:	f001 fcb8 	bl	8001d68 <HAL_TIM_PWM_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80003fe:	f000 f871 	bl	80004e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4619      	mov	r1, r3
 800043e:	4807      	ldr	r0, [pc, #28]	; (800045c <MX_TIM1_Init+0x158>)
 8000440:	f002 fcb4 	bl	8002dac <HAL_TIMEx_ConfigBreakDeadTime>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800044a:	f000 f84b 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <MX_TIM1_Init+0x158>)
 8000450:	f000 f8b6 	bl	80005c0 <HAL_TIM_MspPostInit>

}
 8000454:	bf00      	nop
 8000456:	3770      	adds	r7, #112	; 0x70
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000028 	.word	0x20000028
 8000460:	40012c00 	.word	0x40012c00

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_GPIO_Init+0x78>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a17      	ldr	r2, [pc, #92]	; (80004dc <MX_GPIO_Init+0x78>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_GPIO_Init+0x78>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_GPIO_Init+0x78>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a11      	ldr	r2, [pc, #68]	; (80004dc <MX_GPIO_Init+0x78>)
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_GPIO_Init+0x78>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0302 	and.w	r3, r3, #2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD4_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <MX_GPIO_Init+0x7c>)
 80004b2:	f000 fc49 	bl	8000d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD4_Pin;
 80004b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	4619      	mov	r1, r3
 80004ce:	4804      	ldr	r0, [pc, #16]	; (80004e0 <MX_GPIO_Init+0x7c>)
 80004d0:	f000 fab8 	bl	8000a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	48000400 	.word	0x48000400

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_MspInit+0x44>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6613      	str	r3, [r2, #96]	; 0x60
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_MspInit+0x44>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	6593      	str	r3, [r2, #88]	; 0x58
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <HAL_TIM_Base_MspInit+0x80>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d129      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800055a:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 8000560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000564:	6613      	str	r3, [r2, #96]	; 0x60
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_TIM_Base_MspInit+0x84>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800058a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800059c:	2306      	movs	r3, #6
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4619      	mov	r1, r3
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f000 fa4b 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40012c00 	.word	0x40012c00
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a28      	ldr	r2, [pc, #160]	; (8000680 <HAL_TIM_MspPostInit+0xc0>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d14a      	bne.n	8000678 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a27      	ldr	r2, [pc, #156]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <HAL_TIM_MspPostInit+0xc4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8000612:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000624:	2306      	movs	r3, #6
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fa07 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000646:	2306      	movs	r3, #6
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <HAL_TIM_MspPostInit+0xc8>)
 8000652:	f000 f9f7 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8000668:	230c      	movs	r3, #12
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_TIM_MspPostInit+0xc8>)
 8000674:	f000 f9e6 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40012c00 	.word	0x40012c00
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f890 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f7ff ffea 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f002 fbf5 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fd6f 	bl	8000218 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000748:	08002fa8 	.word	0x08002fa8
  ldr r2, =_sbss
 800074c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000750:	20000078 	.word	0x20000078

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>

08000756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f93d 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f80e 	bl	8000788 <HAL_InitTick>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e001      	b.n	800077c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000778:	f7ff feba 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077c:	79fb      	ldrb	r3, [r7, #7]

}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_InitTick+0x68>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d022      	beq.n	80007e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_InitTick+0x6c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_InitTick+0x68>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80007ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f93a 	bl	8000a2a <HAL_SYSTICK_Config>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10f      	bne.n	80007dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d809      	bhi.n	80007d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c2:	2200      	movs	r2, #0
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	f04f 30ff 	mov.w	r0, #4294967295
 80007ca:	f000 f914 	bl	80009f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_InitTick+0x70>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	e007      	b.n	80007e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e001      	b.n	80007e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4413      	add	r3, r2
 800080a:	4a03      	ldr	r2, [pc, #12]	; (8000818 <HAL_IncTick+0x1c>)
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	20000074 	.word	0x20000074
 800081c:	20000008 	.word	0x20000008

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000074 	.word	0x20000074

08000838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d004      	beq.n	800085c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_Delay+0x40>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4413      	add	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085c:	bf00      	nop
 800085e:	f7ff ffdf 	bl	8000820 <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d8f7      	bhi.n	800085e <HAL_Delay+0x26>
  {
  }
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000008 	.word	0x20000008

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff47 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff5e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffb2 	bl	800099c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a52:	e15a      	b.n	8000d0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 814c 	beq.w	8000d04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d005      	beq.n	8000a84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d017      	beq.n	8000b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2203      	movs	r2, #3
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d123      	bne.n	8000b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	220f      	movs	r2, #15
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	691a      	ldr	r2, [r3, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	08da      	lsrs	r2, r3, #3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0203 	and.w	r2, r3, #3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80a6 	beq.w	8000d04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbc:	4a5a      	ldr	r2, [pc, #360]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc4:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bd0:	4a56      	ldr	r2, [pc, #344]	; (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfa:	d01f      	beq.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_GPIO_Init+0x2ec>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d019      	beq.n	8000c38 <HAL_GPIO_Init+0x1f4>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d013      	beq.n	8000c34 <HAL_GPIO_Init+0x1f0>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4a      	ldr	r2, [pc, #296]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a49      	ldr	r2, [pc, #292]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a48      	ldr	r2, [pc, #288]	; (8000d40 <HAL_GPIO_Init+0x2fc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1e4>
 8000c24:	2305      	movs	r3, #5
 8000c26:	e00a      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c28:	2306      	movs	r3, #6
 8000c2a:	e008      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c30:	2303      	movs	r3, #3
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1fa>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4e:	4937      	ldr	r1, [pc, #220]	; (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c5c:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c80:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000caa:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f47f ae9d 	bne.w	8000a54 <HAL_GPIO_Init+0x10>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	371c      	adds	r7, #28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	48000400 	.word	0x48000400
 8000d34:	48000800 	.word	0x48000800
 8000d38:	48000c00 	.word	0x48000c00
 8000d3c:	48001000 	.word	0x48001000
 8000d40:	48001400 	.word	0x48001400
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d58:	787b      	ldrb	r3, [r7, #1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43d9      	mvns	r1, r3
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	400b      	ands	r3, r1
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	619a      	str	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d141      	bne.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dba:	4b4b      	ldr	r3, [pc, #300]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc6:	d131      	bne.n	8000e2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dc8:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dce:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de0:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000de8:	4b40      	ldr	r3, [pc, #256]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2232      	movs	r2, #50	; 0x32
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dfe:	e002      	b.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d102      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f2      	bne.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e1a:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e26:	d158      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e057      	b.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000e3c:	e04d      	b.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e44:	d141      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e52:	d131      	bne.n	8000eb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2232      	movs	r2, #50	; 0x32
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9b      	lsrs	r3, r3, #18
 8000e86:	3301      	adds	r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e8a:	e002      	b.n	8000e92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e9e:	d102      	bne.n	8000ea6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f2      	bne.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb2:	d112      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e011      	b.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ec8:	e007      	b.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40007000 	.word	0x40007000
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	431bde83 	.word	0x431bde83

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e2fe      	b.n	8001504 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d075      	beq.n	8000ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f12:	4b97      	ldr	r3, [pc, #604]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f1c:	4b94      	ldr	r3, [pc, #592]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d102      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3e>
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d002      	beq.n	8000f38 <HAL_RCC_OscConfig+0x44>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d10b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	4b8d      	ldr	r3, [pc, #564]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d157      	bne.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e2d9      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d106      	bne.n	8000f68 <HAL_RCC_OscConfig+0x74>
 8000f5a:	4b85      	ldr	r3, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a84      	ldr	r2, [pc, #528]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b7f      	ldr	r3, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7e      	ldr	r2, [pc, #504]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7b      	ldr	r2, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a77      	ldr	r2, [pc, #476]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a74      	ldr	r2, [pc, #464]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc38 	bl	8000820 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fc34 	bl	8000820 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e29e      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fc6:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fc24 	bl	8000820 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fc20 	bl	8000820 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e28a      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fee:	4b60      	ldr	r3, [pc, #384]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d075      	beq.n	80010f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100a:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001014:	4b56      	ldr	r3, [pc, #344]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2b0c      	cmp	r3, #12
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x136>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d002      	beq.n	8001030 <HAL_RCC_OscConfig+0x13c>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d11f      	bne.n	8001070 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x154>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e25d      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	4946      	ldr	r1, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fb91 	bl	8000788 <HAL_InitTick>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d043      	beq.n	80010f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e249      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001084:	f7ff fbcc 	bl	8000820 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fbc8 	bl	8000820 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e232      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	061b      	lsls	r3, r3, #24
 80010b8:	492d      	ldr	r1, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
 80010be:	e01a      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fba8 	bl	8000820 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fba4 	bl	8000820 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e20e      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1e0>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d041      	beq.n	8001186 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01c      	beq.n	8001144 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800110c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111a:	f7ff fb81 	bl	8000820 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001122:	f7ff fb7d 	bl	8000820 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e1e7      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0ef      	beq.n	8001122 <HAL_RCC_OscConfig+0x22e>
 8001142:	e020      	b.n	8001186 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 8001146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_RCC_OscConfig+0x27c>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff fb64 	bl	8000820 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115a:	e00d      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fb60 	bl	8000820 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d906      	bls.n	8001178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1ca      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001178:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800117a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1ea      	bne.n	800115c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80a6 	beq.w	80012e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001198:	4b84      	ldr	r3, [pc, #528]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2b4>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x2b6>
 80011a8:	2300      	movs	r3, #0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	4a7e      	ldr	r2, [pc, #504]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ba:	4b7c      	ldr	r3, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011c6:	2301      	movs	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ca:	4b79      	ldr	r3, [pc, #484]	; (80013b0 <HAL_RCC_OscConfig+0x4bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d118      	bne.n	8001208 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_OscConfig+0x4bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x4bc>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fb1d 	bl	8000820 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ea:	f7ff fb19 	bl	8000820 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e183      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fc:	4b6c      	ldr	r3, [pc, #432]	; (80013b0 <HAL_RCC_OscConfig+0x4bc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_RCC_OscConfig+0x32e>
 8001210:	4b66      	ldr	r3, [pc, #408]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	4a65      	ldr	r2, [pc, #404]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001220:	e024      	b.n	800126c <HAL_RCC_OscConfig+0x378>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d110      	bne.n	800124c <HAL_RCC_OscConfig+0x358>
 800122a:	4b60      	ldr	r3, [pc, #384]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800122c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001230:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800123c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001240:	4a5a      	ldr	r2, [pc, #360]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800124a:	e00f      	b.n	800126c <HAL_RCC_OscConfig+0x378>
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800124e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001252:	4a56      	ldr	r2, [pc, #344]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001262:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d016      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fad4 	bl	8000820 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800127a:	e00a      	b.n	8001292 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127c:	f7ff fad0 	bl	8000820 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e138      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0ed      	beq.n	800127c <HAL_RCC_OscConfig+0x388>
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff fabd 	bl	8000820 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff fab9 	bl	8000820 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e121      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1ed      	bne.n	80012aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	4a34      	ldr	r2, [pc, #208]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80012da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d03c      	beq.n	8001366 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01c      	beq.n	800132e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80012f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fa8c 	bl	8000820 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800130c:	f7ff fa88 	bl	8000820 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e0f2      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ef      	beq.n	800130c <HAL_RCC_OscConfig+0x418>
 800132c:	e01b      	b.n	8001366 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fa6f 	bl	8000820 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001346:	f7ff fa6b 	bl	8000820 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0d5      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800135a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ef      	bne.n	8001346 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 80c9 	beq.w	8001502 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b0c      	cmp	r3, #12
 800137a:	f000 8083 	beq.w	8001484 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d15e      	bne.n	8001444 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_RCC_OscConfig+0x4b8>)
 800138c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fa45 	bl	8000820 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	e00c      	b.n	80013b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fa41 	bl	8000820 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d905      	bls.n	80013b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0ab      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <HAL_RCC_OscConfig+0x618>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ec      	bne.n	800139a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c0:	4b52      	ldr	r3, [pc, #328]	; (800150c <HAL_RCC_OscConfig+0x618>)
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x61c>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6a11      	ldr	r1, [r2, #32]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013d0:	3a01      	subs	r2, #1
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	4311      	orrs	r1, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80013da:	0212      	lsls	r2, r2, #8
 80013dc:	4311      	orrs	r1, r2
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013e2:	0852      	lsrs	r2, r2, #1
 80013e4:	3a01      	subs	r2, #1
 80013e6:	0552      	lsls	r2, r2, #21
 80013e8:	4311      	orrs	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ee:	0852      	lsrs	r2, r2, #1
 80013f0:	3a01      	subs	r2, #1
 80013f2:	0652      	lsls	r2, r2, #25
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013fa:	06d2      	lsls	r2, r2, #27
 80013fc:	430a      	orrs	r2, r1
 80013fe:	4943      	ldr	r1, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001400:	4313      	orrs	r3, r2
 8001402:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001404:	4b41      	ldr	r3, [pc, #260]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a40      	ldr	r2, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x618>)
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001410:	4b3e      	ldr	r3, [pc, #248]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a3d      	ldr	r2, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fa00 	bl	8000820 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f9fc 	bl	8000820 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e066      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x530>
 8001442:	e05e      	b.n	8001502 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a30      	ldr	r2, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x618>)
 800144a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff f9e6 	bl	8000820 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f9e2 	bl	8000820 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e04c      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146a:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x618>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x618>)
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_RCC_OscConfig+0x620>)
 800147e:	4013      	ands	r3, r2
 8001480:	60cb      	str	r3, [r1, #12]
 8001482:	e03e      	b.n	8001502 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e039      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_OscConfig+0x618>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d12c      	bne.n	80014fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	3b01      	subs	r3, #1
 80014b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d123      	bne.n	80014fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d11b      	bne.n	80014fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d113      	bne.n	80014fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d109      	bne.n	80014fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	3b01      	subs	r3, #1
 80014f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	019f800c 	.word	0x019f800c
 8001514:	feeefffc 	.word	0xfeeefffc

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e11e      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d910      	bls.n	8001560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 020f 	bic.w	r2, r3, #15
 8001546:	498c      	ldr	r1, [pc, #560]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b8a      	ldr	r3, [pc, #552]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e106      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d073      	beq.n	8001654 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d129      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001574:	4b81      	ldr	r3, [pc, #516]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0f4      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001584:	f000 f966 	bl	8001854 <RCC_GetSysClockFreqFromPLLSource>
 8001588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4a7c      	ldr	r2, [pc, #496]	; (8001780 <HAL_RCC_ClockConfig+0x268>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d93f      	bls.n	8001612 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001592:	4b7a      	ldr	r3, [pc, #488]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d033      	beq.n	8001612 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12f      	bne.n	8001612 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ba:	4a70      	ldr	r2, [pc, #448]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80015bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e024      	b.n	8001612 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0c6      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0be      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015f0:	f000 f8ce 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4a61      	ldr	r2, [pc, #388]	; (8001780 <HAL_RCC_ClockConfig+0x268>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d909      	bls.n	8001612 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fe:	4b5f      	ldr	r3, [pc, #380]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001606:	4a5d      	ldr	r2, [pc, #372]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4957      	ldr	r1, [pc, #348]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001624:	f7ff f8fc 	bl	8000820 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff f8f8 	bl	8000820 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e095      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b4e      	ldr	r3, [pc, #312]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d023      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001676:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001684:	4b3d      	ldr	r3, [pc, #244]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800168c:	4a3b      	ldr	r2, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 800168e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4936      	ldr	r1, [pc, #216]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
 80016a6:	e008      	b.n	80016ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b80      	cmp	r3, #128	; 0x80
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4a32      	ldr	r2, [pc, #200]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 80016b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d21d      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 020f 	bic.w	r2, r3, #15
 80016d0:	4929      	ldr	r1, [pc, #164]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d8:	f7ff f8a2 	bl	8000820 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff f89e 	bl	8000820 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e03b      	b.n	800176e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x260>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d1ed      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4917      	ldr	r1, [pc, #92]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490f      	ldr	r1, [pc, #60]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001742:	f000 f825 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_ClockConfig+0x264>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490c      	ldr	r1, [pc, #48]	; (8001784 <HAL_RCC_ClockConfig+0x26c>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x270>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_ClockConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f80e 	bl	8000788 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000
 800177c:	40021000 	.word	0x40021000
 8001780:	04c4b400 	.word	0x04c4b400
 8001784:	08002f90 	.word	0x08002f90
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	e047      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e03e      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d136      	bne.n	8001834 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e4:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	68d2      	ldr	r2, [r2, #12]
 80017f0:	0a12      	lsrs	r2, r2, #8
 80017f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
      break;
 80017fc:	e00c      	b.n	8001818 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	0a12      	lsrs	r2, r2, #8
 800180c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
      break;
 8001816:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0e5b      	lsrs	r3, r3, #25
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	3301      	adds	r3, #1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e001      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001838:	693b      	ldr	r3, [r7, #16]
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200

08001854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d10c      	bne.n	8001892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001882:	68d2      	ldr	r2, [r2, #12]
 8001884:	0a12      	lsrs	r2, r2, #8
 8001886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
    break;
 8001890:	e00c      	b.n	80018ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	0a12      	lsrs	r2, r2, #8
 80018a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    break;
 80018aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0e5b      	lsrs	r3, r3, #25
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	371c      	adds	r7, #28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	00f42400 	.word	0x00f42400

080018e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e049      	b.n	8001986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe16 	bl	8000538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f000 fc4c 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d001      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e054      	b.n	8001a52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a26      	ldr	r2, [pc, #152]	; (8001a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d022      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d2:	d01d      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d018      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_TIM_Base_Start_IT+0xd8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <HAL_TIM_Base_Start_IT+0xdc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00e      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_TIM_Base_Start_IT+0xe0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_TIM_Base_Start_IT+0xe4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_TIM_Base_Start_IT+0x80>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_TIM_Base_Start_IT+0xe8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d115      	bne.n	8001a3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_TIM_Base_Start_IT+0xec>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d015      	beq.n	8001a4e <HAL_TIM_Base_Start_IT+0xbe>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d011      	beq.n	8001a4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3a:	e008      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e000      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40013400 	.word	0x40013400
 8001a74:	40014000 	.word	0x40014000
 8001a78:	40015000 	.word	0x40015000
 8001a7c:	00010007 	.word	0x00010007

08001a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e049      	b.n	8001b26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f841 	bl	8001b2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 fb7c 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_TIM_PWM_Start+0x24>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e03c      	b.n	8001be2 <HAL_TIM_PWM_Start+0x9e>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d109      	bne.n	8001b82 <HAL_TIM_PWM_Start+0x3e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e02f      	b.n	8001be2 <HAL_TIM_PWM_Start+0x9e>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d109      	bne.n	8001b9c <HAL_TIM_PWM_Start+0x58>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e022      	b.n	8001be2 <HAL_TIM_PWM_Start+0x9e>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d109      	bne.n	8001bb6 <HAL_TIM_PWM_Start+0x72>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	e015      	b.n	8001be2 <HAL_TIM_PWM_Start+0x9e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d109      	bne.n	8001bd0 <HAL_TIM_PWM_Start+0x8c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e008      	b.n	8001be2 <HAL_TIM_PWM_Start+0x9e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0a6      	b.n	8001d38 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_TIM_PWM_Start+0xb6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf8:	e023      	b.n	8001c42 <HAL_TIM_PWM_Start+0xfe>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d104      	bne.n	8001c0a <HAL_TIM_PWM_Start+0xc6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c08:	e01b      	b.n	8001c42 <HAL_TIM_PWM_Start+0xfe>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d104      	bne.n	8001c1a <HAL_TIM_PWM_Start+0xd6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c18:	e013      	b.n	8001c42 <HAL_TIM_PWM_Start+0xfe>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d104      	bne.n	8001c2a <HAL_TIM_PWM_Start+0xe6>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c28:	e00b      	b.n	8001c42 <HAL_TIM_PWM_Start+0xfe>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b10      	cmp	r3, #16
 8001c2e:	d104      	bne.n	8001c3a <HAL_TIM_PWM_Start+0xf6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c38:	e003      	b.n	8001c42 <HAL_TIM_PWM_Start+0xfe>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 ff30 	bl	8002ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_TIM_PWM_Start+0x1fc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d018      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x148>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a39      	ldr	r2, [pc, #228]	; (8001d44 <HAL_TIM_PWM_Start+0x200>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x148>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a37      	ldr	r2, [pc, #220]	; (8001d48 <HAL_TIM_PWM_Start+0x204>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00e      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x148>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_TIM_PWM_Start+0x208>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x148>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_TIM_PWM_Start+0x20c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x148>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <HAL_TIM_PWM_Start+0x210>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_TIM_PWM_Start+0x14c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_TIM_PWM_Start+0x14e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <HAL_TIM_PWM_Start+0x1fc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d022      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d01d      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_TIM_PWM_Start+0x214>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d018      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <HAL_TIM_PWM_Start+0x218>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_PWM_Start+0x21c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_TIM_PWM_Start+0x200>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d009      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_TIM_PWM_Start+0x204>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d004      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x1b2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_TIM_PWM_Start+0x210>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d115      	bne.n	8001d22 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_TIM_PWM_Start+0x220>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d015      	beq.n	8001d34 <HAL_TIM_PWM_Start+0x1f0>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d011      	beq.n	8001d34 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	e008      	b.n	8001d34 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e000      	b.n	8001d36 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	40013400 	.word	0x40013400
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40014400 	.word	0x40014400
 8001d50:	40014800 	.word	0x40014800
 8001d54:	40015000 	.word	0x40015000
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40000800 	.word	0x40000800
 8001d60:	40000c00 	.word	0x40000c00
 8001d64:	00010007 	.word	0x00010007

08001d68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0ff      	b.n	8001f86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b14      	cmp	r3, #20
 8001d92:	f200 80f0 	bhi.w	8001f76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001df1 	.word	0x08001df1
 8001da0:	08001f77 	.word	0x08001f77
 8001da4:	08001f77 	.word	0x08001f77
 8001da8:	08001f77 	.word	0x08001f77
 8001dac:	08001e31 	.word	0x08001e31
 8001db0:	08001f77 	.word	0x08001f77
 8001db4:	08001f77 	.word	0x08001f77
 8001db8:	08001f77 	.word	0x08001f77
 8001dbc:	08001e73 	.word	0x08001e73
 8001dc0:	08001f77 	.word	0x08001f77
 8001dc4:	08001f77 	.word	0x08001f77
 8001dc8:	08001f77 	.word	0x08001f77
 8001dcc:	08001eb3 	.word	0x08001eb3
 8001dd0:	08001f77 	.word	0x08001f77
 8001dd4:	08001f77 	.word	0x08001f77
 8001dd8:	08001f77 	.word	0x08001f77
 8001ddc:	08001ef5 	.word	0x08001ef5
 8001de0:	08001f77 	.word	0x08001f77
 8001de4:	08001f77 	.word	0x08001f77
 8001de8:	08001f77 	.word	0x08001f77
 8001dec:	08001f35 	.word	0x08001f35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fa94 	bl	8002324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6999      	ldr	r1, [r3, #24]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	619a      	str	r2, [r3, #24]
      break;
 8001e2e:	e0a5      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fb0e 	bl	8002458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6999      	ldr	r1, [r3, #24]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	021a      	lsls	r2, r3, #8
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	619a      	str	r2, [r3, #24]
      break;
 8001e70:	e084      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fb81 	bl	8002580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0208 	orr.w	r2, r2, #8
 8001e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0204 	bic.w	r2, r2, #4
 8001e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69d9      	ldr	r1, [r3, #28]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	61da      	str	r2, [r3, #28]
      break;
 8001eb0:	e064      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fbf3 	bl	80026a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69d9      	ldr	r1, [r3, #28]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]
      break;
 8001ef2:	e043      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fc66 	bl	80027cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0208 	orr.w	r2, r2, #8
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0204 	bic.w	r2, r2, #4
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001f32:	e023      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fcb0 	bl	80028a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	021a      	lsls	r2, r3, #8
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
      break;
 8001f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop

08001f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_TIM_ConfigClockSource+0x1c>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e0f6      	b.n	800219a <HAL_TIM_ConfigClockSource+0x20a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8001fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_TIM_ConfigClockSource+0x214>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f000 80c1 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 8001fec:	4a6d      	ldr	r2, [pc, #436]	; (80021a4 <HAL_TIM_ConfigClockSource+0x214>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f200 80c6 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8001ff4:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <HAL_TIM_ConfigClockSource+0x218>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	f000 80b9 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <HAL_TIM_ConfigClockSource+0x218>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f200 80be 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002004:	4a69      	ldr	r2, [pc, #420]	; (80021ac <HAL_TIM_ConfigClockSource+0x21c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f000 80b1 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800200c:	4a67      	ldr	r2, [pc, #412]	; (80021ac <HAL_TIM_ConfigClockSource+0x21c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	f200 80b6 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002014:	4a66      	ldr	r2, [pc, #408]	; (80021b0 <HAL_TIM_ConfigClockSource+0x220>)
 8002016:	4293      	cmp	r3, r2
 8002018:	f000 80a9 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800201c:	4a64      	ldr	r2, [pc, #400]	; (80021b0 <HAL_TIM_ConfigClockSource+0x220>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f200 80ae 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002024:	4a63      	ldr	r2, [pc, #396]	; (80021b4 <HAL_TIM_ConfigClockSource+0x224>)
 8002026:	4293      	cmp	r3, r2
 8002028:	f000 80a1 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800202c:	4a61      	ldr	r2, [pc, #388]	; (80021b4 <HAL_TIM_ConfigClockSource+0x224>)
 800202e:	4293      	cmp	r3, r2
 8002030:	f200 80a6 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002034:	4a60      	ldr	r2, [pc, #384]	; (80021b8 <HAL_TIM_ConfigClockSource+0x228>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f000 8099 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800203c:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_TIM_ConfigClockSource+0x228>)
 800203e:	4293      	cmp	r3, r2
 8002040:	f200 809e 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002044:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002048:	f000 8091 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800204c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002050:	f200 8096 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002058:	f000 8089 	beq.w	800216e <HAL_TIM_ConfigClockSource+0x1de>
 800205c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002060:	f200 808e 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002068:	d03e      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0x158>
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206e:	f200 8087 	bhi.w	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002076:	f000 8086 	beq.w	8002186 <HAL_TIM_ConfigClockSource+0x1f6>
 800207a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207e:	d87f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002080:	2b70      	cmp	r3, #112	; 0x70
 8002082:	d01a      	beq.n	80020ba <HAL_TIM_ConfigClockSource+0x12a>
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d87b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002088:	2b60      	cmp	r3, #96	; 0x60
 800208a:	d050      	beq.n	800212e <HAL_TIM_ConfigClockSource+0x19e>
 800208c:	2b60      	cmp	r3, #96	; 0x60
 800208e:	d877      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002090:	2b50      	cmp	r3, #80	; 0x50
 8002092:	d03c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x17e>
 8002094:	2b50      	cmp	r3, #80	; 0x50
 8002096:	d873      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d058      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x1be>
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d86f      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 80020a0:	2b30      	cmp	r3, #48	; 0x30
 80020a2:	d064      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x1de>
 80020a4:	2b30      	cmp	r3, #48	; 0x30
 80020a6:	d86b      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d060      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x1de>
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d867      	bhi.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05c      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x1de>
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d05a      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x1de>
 80020b8:	e062      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f000 fcd1 	bl	8002a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
      break;
 80020e6:	e04f      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f000 fcba 	bl	8002a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	609a      	str	r2, [r3, #8]
      break;
 800210c:	e03c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	461a      	mov	r2, r3
 800211c:	f000 fc2c 	bl	8002978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2150      	movs	r1, #80	; 0x50
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fc85 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 800212c:	e02c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	461a      	mov	r2, r3
 800213c:	f000 fc4b 	bl	80029d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2160      	movs	r1, #96	; 0x60
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fc75 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 800214c:	e01c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	461a      	mov	r2, r3
 800215c:	f000 fc0c 	bl	8002978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fc65 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 800216c:	e00c      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f000 fc5c 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 800217e:	e003      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      break;
 8002184:	e000      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	00100070 	.word	0x00100070
 80021a8:	00100060 	.word	0x00100060
 80021ac:	00100050 	.word	0x00100050
 80021b0:	00100040 	.word	0x00100040
 80021b4:	00100030 	.word	0x00100030
 80021b8:	00100020 	.word	0x00100020

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <TIM_Base_SetConfig+0x144>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d017      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d013      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a49      	ldr	r2, [pc, #292]	; (8002304 <TIM_Base_SetConfig+0x148>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00f      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a48      	ldr	r2, [pc, #288]	; (8002308 <TIM_Base_SetConfig+0x14c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00b      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <TIM_Base_SetConfig+0x150>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a46      	ldr	r2, [pc, #280]	; (8002310 <TIM_Base_SetConfig+0x154>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0x48>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a45      	ldr	r2, [pc, #276]	; (8002314 <TIM_Base_SetConfig+0x158>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d108      	bne.n	8002216 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a39      	ldr	r2, [pc, #228]	; (8002300 <TIM_Base_SetConfig+0x144>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d023      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d01f      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a36      	ldr	r2, [pc, #216]	; (8002304 <TIM_Base_SetConfig+0x148>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <TIM_Base_SetConfig+0x14c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d017      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <TIM_Base_SetConfig+0x150>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a33      	ldr	r2, [pc, #204]	; (8002310 <TIM_Base_SetConfig+0x154>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a33      	ldr	r2, [pc, #204]	; (8002318 <TIM_Base_SetConfig+0x15c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a32      	ldr	r2, [pc, #200]	; (800231c <TIM_Base_SetConfig+0x160>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a31      	ldr	r2, [pc, #196]	; (8002320 <TIM_Base_SetConfig+0x164>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0xaa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <TIM_Base_SetConfig+0x158>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a18      	ldr	r2, [pc, #96]	; (8002300 <TIM_Base_SetConfig+0x144>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d013      	beq.n	80022cc <TIM_Base_SetConfig+0x110>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <TIM_Base_SetConfig+0x154>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00f      	beq.n	80022cc <TIM_Base_SetConfig+0x110>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <TIM_Base_SetConfig+0x15c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00b      	beq.n	80022cc <TIM_Base_SetConfig+0x110>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <TIM_Base_SetConfig+0x160>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x110>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <TIM_Base_SetConfig+0x164>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x110>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <TIM_Base_SetConfig+0x158>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d103      	bne.n	80022d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f023 0201 	bic.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]
  }
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800
 800230c:	40000c00 	.word	0x40000c00
 8002310:	40013400 	.word	0x40013400
 8002314:	40015000 	.word	0x40015000
 8002318:	40014000 	.word	0x40014000
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800

08002324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f023 0201 	bic.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0303 	bic.w	r3, r3, #3
 800235e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f023 0302 	bic.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a30      	ldr	r2, [pc, #192]	; (8002440 <TIM_OC1_SetConfig+0x11c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <TIM_OC1_SetConfig+0x88>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <TIM_OC1_SetConfig+0x120>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00f      	beq.n	80023ac <TIM_OC1_SetConfig+0x88>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <TIM_OC1_SetConfig+0x124>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00b      	beq.n	80023ac <TIM_OC1_SetConfig+0x88>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a2d      	ldr	r2, [pc, #180]	; (800244c <TIM_OC1_SetConfig+0x128>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <TIM_OC1_SetConfig+0x88>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a2c      	ldr	r2, [pc, #176]	; (8002450 <TIM_OC1_SetConfig+0x12c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_OC1_SetConfig+0x88>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <TIM_OC1_SetConfig+0x130>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d10c      	bne.n	80023c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0308 	bic.w	r3, r3, #8
 80023b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <TIM_OC1_SetConfig+0x11c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <TIM_OC1_SetConfig+0xd2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <TIM_OC1_SetConfig+0x120>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <TIM_OC1_SetConfig+0xd2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <TIM_OC1_SetConfig+0x124>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <TIM_OC1_SetConfig+0xd2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	; (800244c <TIM_OC1_SetConfig+0x128>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <TIM_OC1_SetConfig+0xd2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <TIM_OC1_SetConfig+0x12c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <TIM_OC1_SetConfig+0xd2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <TIM_OC1_SetConfig+0x130>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	621a      	str	r2, [r3, #32]
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40013400 	.word	0x40013400
 8002448:	40014000 	.word	0x40014000
 800244c:	40014400 	.word	0x40014400
 8002450:	40014800 	.word	0x40014800
 8002454:	40015000 	.word	0x40015000

08002458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 0210 	bic.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0320 	bic.w	r3, r3, #32
 80024a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <TIM_OC2_SetConfig+0x110>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <TIM_OC2_SetConfig+0x74>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a2b      	ldr	r2, [pc, #172]	; (800256c <TIM_OC2_SetConfig+0x114>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d003      	beq.n	80024cc <TIM_OC2_SetConfig+0x74>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <TIM_OC2_SetConfig+0x118>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10d      	bne.n	80024e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <TIM_OC2_SetConfig+0x110>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <TIM_OC2_SetConfig+0xc0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a1e      	ldr	r2, [pc, #120]	; (800256c <TIM_OC2_SetConfig+0x114>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00f      	beq.n	8002518 <TIM_OC2_SetConfig+0xc0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <TIM_OC2_SetConfig+0x11c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_OC2_SetConfig+0xc0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <TIM_OC2_SetConfig+0x120>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <TIM_OC2_SetConfig+0xc0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <TIM_OC2_SetConfig+0x124>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_OC2_SetConfig+0xc0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <TIM_OC2_SetConfig+0x118>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d113      	bne.n	8002540 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800251e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40013400 	.word	0x40013400
 8002570:	40015000 	.word	0x40015000
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800

08002580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a2b      	ldr	r2, [pc, #172]	; (800268c <TIM_OC3_SetConfig+0x10c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_OC3_SetConfig+0x72>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <TIM_OC3_SetConfig+0x110>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_OC3_SetConfig+0x72>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <TIM_OC3_SetConfig+0x114>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10d      	bne.n	800260e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800260c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <TIM_OC3_SetConfig+0x10c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <TIM_OC3_SetConfig+0xbe>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <TIM_OC3_SetConfig+0x110>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00f      	beq.n	800263e <TIM_OC3_SetConfig+0xbe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <TIM_OC3_SetConfig+0x118>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00b      	beq.n	800263e <TIM_OC3_SetConfig+0xbe>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <TIM_OC3_SetConfig+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <TIM_OC3_SetConfig+0xbe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <TIM_OC3_SetConfig+0x120>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_OC3_SetConfig+0xbe>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a16      	ldr	r2, [pc, #88]	; (8002694 <TIM_OC3_SetConfig+0x114>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d113      	bne.n	8002666 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	621a      	str	r2, [r3, #32]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40013400 	.word	0x40013400
 8002694:	40015000 	.word	0x40015000
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800

080026a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	031b      	lsls	r3, r3, #12
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <TIM_OC4_SetConfig+0x110>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_OC4_SetConfig+0x74>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <TIM_OC4_SetConfig+0x114>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_OC4_SetConfig+0x74>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <TIM_OC4_SetConfig+0x118>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10d      	bne.n	8002734 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800271e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <TIM_OC4_SetConfig+0x110>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <TIM_OC4_SetConfig+0xc0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <TIM_OC4_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00f      	beq.n	8002764 <TIM_OC4_SetConfig+0xc0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <TIM_OC4_SetConfig+0x11c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00b      	beq.n	8002764 <TIM_OC4_SetConfig+0xc0>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <TIM_OC4_SetConfig+0x120>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d007      	beq.n	8002764 <TIM_OC4_SetConfig+0xc0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <TIM_OC4_SetConfig+0x124>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d003      	beq.n	8002764 <TIM_OC4_SetConfig+0xc0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <TIM_OC4_SetConfig+0x118>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d113      	bne.n	800278c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800276a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002772:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40013400 	.word	0x40013400
 80027bc:	40015000 	.word	0x40015000
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800

080027cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <TIM_OC5_SetConfig+0xbc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <TIM_OC5_SetConfig+0x82>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <TIM_OC5_SetConfig+0xc0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00f      	beq.n	800284e <TIM_OC5_SetConfig+0x82>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <TIM_OC5_SetConfig+0xc4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <TIM_OC5_SetConfig+0x82>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <TIM_OC5_SetConfig+0xc8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_OC5_SetConfig+0x82>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <TIM_OC5_SetConfig+0xcc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_OC5_SetConfig+0x82>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <TIM_OC5_SetConfig+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d109      	bne.n	8002862 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40013400 	.word	0x40013400
 8002890:	40014000 	.word	0x40014000
 8002894:	40014400 	.word	0x40014400
 8002898:	40014800 	.word	0x40014800
 800289c:	40015000 	.word	0x40015000

080028a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	051b      	lsls	r3, r3, #20
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <TIM_OC6_SetConfig+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <TIM_OC6_SetConfig+0x84>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <TIM_OC6_SetConfig+0xc4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00f      	beq.n	8002924 <TIM_OC6_SetConfig+0x84>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <TIM_OC6_SetConfig+0xc8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00b      	beq.n	8002924 <TIM_OC6_SetConfig+0x84>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <TIM_OC6_SetConfig+0xcc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d007      	beq.n	8002924 <TIM_OC6_SetConfig+0x84>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <TIM_OC6_SetConfig+0xd0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <TIM_OC6_SetConfig+0x84>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <TIM_OC6_SetConfig+0xd4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d109      	bne.n	8002938 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	029b      	lsls	r3, r3, #10
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	621a      	str	r2, [r3, #32]
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40013400 	.word	0x40013400
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800
 8002974:	40015000 	.word	0x40015000

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0201 	bic.w	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 030a 	bic.w	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f023 0210 	bic.w	r2, r3, #16
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 0307 	orr.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	021a      	lsls	r2, r3, #8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_TIMEx_PWMN_Start+0x24>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e022      	b.n	8002b66 <HAL_TIMEx_PWMN_Start+0x6a>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d109      	bne.n	8002b3a <HAL_TIMEx_PWMN_Start+0x3e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e015      	b.n	8002b66 <HAL_TIMEx_PWMN_Start+0x6a>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d109      	bne.n	8002b54 <HAL_TIMEx_PWMN_Start+0x58>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e008      	b.n	8002b66 <HAL_TIMEx_PWMN_Start+0x6a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e073      	b.n	8002c56 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_TIMEx_PWMN_Start+0x82>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	e013      	b.n	8002ba6 <HAL_TIMEx_PWMN_Start+0xaa>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d104      	bne.n	8002b8e <HAL_TIMEx_PWMN_Start+0x92>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b8c:	e00b      	b.n	8002ba6 <HAL_TIMEx_PWMN_Start+0xaa>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d104      	bne.n	8002b9e <HAL_TIMEx_PWMN_Start+0xa2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b9c:	e003      	b.n	8002ba6 <HAL_TIMEx_PWMN_Start+0xaa>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f990 	bl	8002ed4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <HAL_TIMEx_PWMN_Start+0x164>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d01d      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <HAL_TIMEx_PWMN_Start+0x168>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_TIMEx_PWMN_Start+0x16c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_TIMEx_PWMN_Start+0x170>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_TIMEx_PWMN_Start+0x174>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <HAL_TIMEx_PWMN_Start+0x178>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIMEx_PWMN_Start+0x118>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	; (8002c78 <HAL_TIMEx_PWMN_Start+0x17c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d115      	bne.n	8002c40 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_TIMEx_PWMN_Start+0x180>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d015      	beq.n	8002c52 <HAL_TIMEx_PWMN_Start+0x156>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d011      	beq.n	8002c52 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e008      	b.n	8002c52 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e000      	b.n	8002c54 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40013400 	.word	0x40013400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40015000 	.word	0x40015000
 8002c7c:	00010007 	.word	0x00010007

08002c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e074      	b.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a33      	ldr	r2, [pc, #204]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d01d      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d10c      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40013400 	.word	0x40013400
 8002d98:	40015000 	.word	0x40015000
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40014000 	.word	0x40014000

08002dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e078      	b.n	8002eba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	051b      	lsls	r3, r3, #20
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40013400 	.word	0x40013400
 8002ed0:	40015000 	.word	0x40015000

08002ed4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4d0d      	ldr	r5, [pc, #52]	; (8002f58 <__libc_init_array+0x38>)
 8002f24:	4c0d      	ldr	r4, [pc, #52]	; (8002f5c <__libc_init_array+0x3c>)
 8002f26:	1b64      	subs	r4, r4, r5
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	2600      	movs	r6, #0
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	4d0b      	ldr	r5, [pc, #44]	; (8002f60 <__libc_init_array+0x40>)
 8002f32:	4c0c      	ldr	r4, [pc, #48]	; (8002f64 <__libc_init_array+0x44>)
 8002f34:	f000 f820 	bl	8002f78 <_init>
 8002f38:	1b64      	subs	r4, r4, r5
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08002fa0 	.word	0x08002fa0
 8002f5c:	08002fa0 	.word	0x08002fa0
 8002f60:	08002fa0 	.word	0x08002fa0
 8002f64:	08002fa4 	.word	0x08002fa4

08002f68 <memset>:
 8002f68:	4402      	add	r2, r0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <memset+0xa>
 8002f70:	4770      	bx	lr
 8002f72:	f803 1b01 	strb.w	r1, [r3], #1
 8002f76:	e7f9      	b.n	8002f6c <memset+0x4>

08002f78 <_init>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	bf00      	nop
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr

08002f84 <_fini>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr
